<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-25T13:10:49.359Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一起来水坑 --- 说说 让你直呼傻x 的bug， 让你头痛不已的错误~~</title>
    <link href="http://example.com/2021/09/24/Bug%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/24/Bug%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-24T09:45:58.000Z</published>
    <updated>2021-09-25T13:10:49.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大家好，我是<font color=#0000FF>  DongGu</font> ,是一名软件工程专业大二的学生，写博客一方面是为了记录自己的学习过程，把自己犯的错误进行分享。但由于水平有限，博客中难免会有一些错误出现，有纰漏之处恳请各位大佬不吝赐教！有任何问题可以评论或者QQ联系(1521839703)</p></blockquote><span id="more"></span><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><ul><li>初衷，昨天晚上莫名其妙想到我们的一个集训队老师说我们缺少交流，缺少分享经验，确实，感觉大家在群里确实幽默风趣，互相调侃，而到了线下，比较拘谨，各干各的，所以在这里，就想通过这么个方式去达到这个效果，并且就通过记录我的错误，或者说把大家有犯过的错误，去分享出去，大家没事就像刷几个小视频一样看这些bug，看看大伙犯的错误有没有同感，或者说笑笑自己有多么的傻x，从而避免再犯同样的错误。</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>不过希望大家不灌水哦，为了更好的体验，后面通过学习一些技术去把它整理，分类，希望能到那种程度，从而提高一些阅读体验。</li></ul><blockquote><p>ps： 如果说大家有什么更好的改进，可以私信或QQ联系<br>同步到  -&gt; <a href="https://github.com/ADongGu/MyBlog/issues/1#issue-999195760">github</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;大家好，我是&lt;font color=#0000FF&gt;  DongGu&lt;/font&gt; ,是一名软件工程专业大二的学生，写博客一方面是为了记录自己的学习过程，把自己犯的错误进行分享。但由于水平有限，博客中难免会有一些错误出现，有纰漏之处恳请各位大佬不吝赐教！有任何问题可以评论或者QQ联系(1521839703)&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>主席树</title>
    <link href="http://example.com/2021/09/24/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>http://example.com/2021/09/24/%E4%B8%BB%E5%B8%AD%E6%A0%91/</id>
    <published>2021-09-24T09:45:58.000Z</published>
    <updated>2021-09-25T13:34:27.636Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  大家好，我是<font color=#0000FF>  DongGu</font> ,是一名软件工程专业大二的学生，写博客一方面是为了记录自己的学习过程，把自己犯的错误进行分享。但由于水平有限，博客中难免会有一些错误出现，有纰漏之处恳请各位大佬不吝赐教！有任何问题可以评论或者QQ联系(1521839703)</p></blockquote><p>@<a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p></font><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><span id="more"></span><h1 id="直接上个图"><a href="#直接上个图" class="headerlink" title="直接上个图"></a>直接上个图</h1><p>ps（<a href="https://www.luogu.com.cn/problem/P3834">题目</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">依照这个数据 画的图</span><br><span class="line">5 5</span><br><span class="line">25957 6405 15770 26287 26465 </span><br><span class="line">2 2 1</span><br><span class="line">3 4 1</span><br><span class="line">4 5 1</span><br><span class="line">1 2 2</span><br><span class="line">4 4 1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/82c6ae39918b4494a8940fe0163d5253.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG9uZ0d1Lg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="1-什么是可持久化"><a href="#1-什么是可持久化" class="headerlink" title="1. 什么是可持久化"></a>1. 什么是可持久化</h3><blockquote><p>就是说 你要去访问之前的状态， 感觉有点像dp和哈希， 每个点的标号来决定一个状态</p></blockquote><hr><h3 id="2-主席树它能带来什么效果"><a href="#2-主席树它能带来什么效果" class="headerlink" title="2. 主席树它能带来什么效果"></a>2. 主席树它能带来什么效果</h3><blockquote><p>就我自己感觉来说，就是两颗一模一样的树，不是完完全全复制，而是有选择的复制，从图也可以看出，好好看这张图的编号，它可以节省空间，节省时间，hjt大佬Orz</p></blockquote><hr><h3 id="3-我一开始最难接受的部分……"><a href="#3-我一开始最难接受的部分……" class="headerlink" title="3. 我一开始最难接受的部分……"></a>3. 我一开始最难接受的部分……</h3><blockquote><ul><li>就是动态开点，引用&amp; 的使用，但是如果在建造的时候不用引用，你会发现根本就改不了实际值，然后还得加上好多好多行代码来实现，没必要，</li><li>引用&amp;：就是为了递归中更好修改每个节点的左右子树，对， 就这样， 接受它的存在</li></ul></blockquote><hr><hr><hr><h2 id="洛谷主席树"><a href="#洛谷主席树" class="headerlink" title="洛谷主席树"></a>洛谷主席树</h2><p><a href="https://www.luogu.com.cn/problem/P3834">模板题</a></p><blockquote><ul><li>因为它的数值范围太大，需要离散化，这里用的是stl的unique</li><li>然后类似前缀和的思想，k &lt; sumL , 就往左子树去，相反，就去右子树</li><li>再看看图<img src="https://img-blog.csdnimg.cn/82c6ae39918b4494a8940fe0163d5253.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG9uZ0d1Lg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></li><li>最后查询的时候不要去按原数值输出，因为它建立的时候是类似权值线段树，输出应该是离散化后的数值下标</li><li>root[] : 每个i 都给它建立一颗树，但不需要每个点都建，而是有选择的开点 存数据，看图，类似i == 3 时 10号点的左子树是7 是i == 2 的版本，而它要存的是右子树，然后开点存11节点的数据，那么root[i], 就是每个版本的根节点的数值，这样能更好的管理；</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), x) - v.<span class="built_in">begin</span>() + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum;</span><br><span class="line">&#125;hjt[maxn * <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt, root[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pre, <span class="keyword">int</span>&amp; now, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    hjt[++cnt] = hjt[pre];</span><br><span class="line">    now = cnt;</span><br><span class="line">    hjt[now].sum++;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;      </span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) <span class="built_in">insert</span>(l, m, hjt[pre].l, hjt[now].l, p);</span><br><span class="line">    <span class="keyword">else</span><span class="built_in">insert</span>(m + <span class="number">1</span>, r, hjt[pre].r, hjt[now].r, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = hjt[hjt[R].l].sum - hjt[hjt[L].l].sum;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= tmp) <span class="keyword">return</span> <span class="built_in">query</span>(l, m, hjt[L].l, hjt[R].l, k);</span><br><span class="line">    <span class="keyword">else</span>   <span class="keyword">return</span> <span class="built_in">query</span>(m + <span class="number">1</span>, r, hjt[L].r, hjt[R].r, k - tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> HZD</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        v.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()), v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(<span class="number">1</span>, n, root[i - <span class="number">1</span>], root[i], <span class="built_in">getid</span>(a[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r, k; cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">        <span class="comment">// 是v 而不是 a</span></span><br><span class="line">        cout &lt;&lt; (v[<span class="built_in">query</span>(<span class="number">1</span>, n, root[l - <span class="number">1</span>], root[r], k) - <span class="number">1</span>]) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="可持久化数组"><a href="#可持久化数组" class="headerlink" title="可持久化数组"></a>可持久化数组</h2><p>（<a href="https://www.luogu.com.cn/problem/P3919">模板题</a>）</p><blockquote><p><img src="https://img-blog.csdnimg.cn/195f3aeff62b4cee9fa0d870b3416540.png#pic_center" alt="在这里插入图片描述"></p><ul><li>既然说道每个操作对应一个版本，那我们可以想到上一道题，主席树的root，就是来存每个根节点的值，</li><li>那这里我们直接更新root所对应树进行修改就ok了</li><li>询问的话 就把你要的第几个版本的树丢到query函数去</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid + 1, r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, val;</span><br><span class="line">&#125;hjt[N * <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> &amp;now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">now = ++cnt;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;hjt[now].val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson, hjt[now].l);</span><br><span class="line"><span class="built_in">build</span>(rson, hjt[now].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pre, <span class="keyword">int</span> &amp;now, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">now = ++cnt;</span><br><span class="line">hjt[now] = hjt[pre];</span><br><span class="line"><span class="keyword">if</span> (l == r &amp;&amp; l == pos) &#123;</span><br><span class="line">hjt[now].val = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">updata</span>(lson, hjt[pre].l, hjt[now].l, pos, val);</span><br><span class="line"><span class="keyword">else</span>            <span class="built_in">updata</span>(rson, hjt[pre].r, hjt[now].r, pos, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> hjt[now].val;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(lson, hjt[now].l, pos);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">query</span>(rson, hjt[now].r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HZD</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, n, root[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pre, op, pos, val; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;pre, &amp;op, &amp;pos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val);</span><br><span class="line"><span class="built_in">updata</span>(<span class="number">1</span>, n, root[pre], root[i], pos, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, n, root[pre], pos));</span><br><span class="line">root[i] = root[pre];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="可持久化并查集"><a href="#可持久化并查集" class="headerlink" title="可持久化并查集"></a>可持久化并查集</h2><p>(<a href="https://www.luogu.com.cn/problem/P3402">模板</a>)</p><blockquote><ul><li>其实思想还是和前面一样，在这里就分享一下怎么去更新父亲fa，高度deep</li><li>我们都知道每个cnt开出来的点都有一个独一无二的标号，所以只要你传进来了一个根节点标号root[i], 你就可以知道每个叶子节点的fa 和deep，进而你就可以修改呀，查询呀，都是很基本的操作，和上面大同小异</li><li>那么我感觉最难的就是这么去找父亲呢？如果还是用路径压缩，那还不是白忙活了，每次查找都要创造一个fa[i]数组，那会爆了，换一个用秩来结合，也就是高度矮的 移到 高的<br>类似这样(合并1 4，发现两个高度相同，任取一个就行)<img src="https://img-blog.csdnimg.cn/30db5db9cc2f499985970ab70f517e3f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG9uZ0d1Lg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>相应的， 当发现合并完之后，你要检查一下在此之前是不是两个集合的高度相同，是的话，还要去更新它的deep，像上图的4那样 deep[4] ++;</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, fa, deep;</span><br><span class="line">&#125;hjt[N * <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">now = ++cnt;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">hjt[now].fa = l;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l, mid, hjt[now].l);</span><br><span class="line"><span class="built_in">build</span>(mid + <span class="number">1</span>, r, hjt[now].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pre, <span class="keyword">int</span>&amp; now, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">now = ++cnt;</span><br><span class="line"></span><br><span class="line">hjt[now] = hjt[pre];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">hjt[now].fa = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid)<span class="built_in">updata</span>(l, mid, hjt[pre].l, hjt[now].l, pos, val);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">updata</span>(mid + <span class="number">1</span>, r, hjt[pre].r, hjt[now].r, pos, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> now;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid)<span class="keyword">return</span> <span class="built_in">query</span>(l, mid, hjt[now].l, pos);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">query</span>(mid + <span class="number">1</span>, r, hjt[now].r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> now)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">hjt[now].deep++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">add</span>(hjt[now].l, l, mid, pos);</span><br><span class="line"><span class="keyword">else</span>            <span class="built_in">add</span>(hjt[now].r, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> ed, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ff = <span class="built_in">query</span>(<span class="number">1</span>, n, ed, x);</span><br><span class="line"><span class="keyword">if</span> (x == hjt[ff].fa) <span class="keyword">return</span> ff;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find_fa</span>(ed, hjt[ff].fa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, n, root[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op, a, b; cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">root[i] = root[i - <span class="number">1</span>];</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">int</span> f1 = <span class="built_in">find_fa</span>(root[i], a);</span><br><span class="line"><span class="keyword">int</span> f2 = <span class="built_in">find_fa</span>(root[i], b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hjt[f1].fa == hjt[f2].fa) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hjt[f1].deep &gt; hjt[f2].deep) <span class="built_in">swap</span>(f1, f2);</span><br><span class="line"><span class="built_in">updata</span>(<span class="number">1</span>, n, root[i - <span class="number">1</span>], root[i], hjt[f1].fa, hjt[f2].fa);  <span class="comment">// 这里更新的只是修改fa 而没有改变deep</span></span><br><span class="line"><span class="keyword">if</span> (hjt[f1].deep == hjt[f2].deep) <span class="built_in">add</span>(root[i], <span class="number">1</span>, n, hjt[f2].fa); <span class="comment">// 因为是把f1 接到f2 所以如果高度相等，那么f2这颗树就要+1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">root[i] = root[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">root[i] = root[i - <span class="number">1</span>];</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f1 = <span class="built_in">find_fa</span>(root[i], a);</span><br><span class="line"><span class="keyword">int</span> f2 = <span class="built_in">find_fa</span>(root[i], b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hjt[f1].fa == hjt[f2].fa) cout &lt;&lt; <span class="string">&quot;1\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (t--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 10</span></span><br><span class="line"><span class="comment">1 4 1</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">1 9 3</span></span><br><span class="line"><span class="comment">3 5 8</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">1 6 2</span></span><br><span class="line"><span class="comment">1 5 7</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 1 9</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><p>ps： 在这里还得感谢AgOH大佬的讲解，Orz</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  大家好，我是&lt;font color=#0000FF&gt;  DongGu&lt;/font&gt; ,是一名软件工程专业大二的学生，写博客一方面是为了记录自己的学习过程，把自己犯的错误进行分享。但由于水平有限，博客中难免会有一些错误出现，有纰漏之处恳请各位大佬不吝赐教！有任何问题可以评论或者QQ联系(1521839703)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@&lt;a href=&quot;%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;/font&gt;

&lt;hr style=&quot; border:solid; width:100px; height:1px;&quot; color=#000000 size=1&quot;&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
